package storeFunctionTesting;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;

import org.apache.commons.lang3.StringUtils;
import org.testng.Assert;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

public class SFTestig {

	Connection con=null;
	Statement stmt;
	ResultSet rs;
	ResultSet rs1;
	ResultSet rs2;
	CallableStatement cStmt;
	
    @BeforeClass
	void setup() throws SQLException
	{
		con=DriverManager.getConnection("jdbc:mysql://localhost:3306/classicmodels", "root", "root");
	}
    
    @AfterClass
	void teardown() throws SQLException
	{
		con.close();
	}
    
    //Test to check stored function name 
    //@Test(priority=1)
    void test_storedFunctionExists() throws SQLException
    {
    	//Create statement, execute query, then store it into resultSet 
    	rs=con.createStatement().executeQuery("SHOW FUNCTION STATUS WHERE db='classicmodels'");
    	rs.next();
    	
    	//Assert the value under Name from the resultSet above and see if it equals "CustomerLevel".
    	Assert.assertEquals(rs.getString("Name"),"CustomerLevel");
    }
    
    
    //Test to compare stored function and test query results: all customer name and their levels
    @Test(priority=2)
    void test_CustomerLevel_with_SQLStatement() throws SQLException
    {
    	//reseltSet 1: store the value from executed stored function
    	rs1=con.createStatement().executeQuery("SELECT customerName, CustomerLevel(creditLimit) FROM customers");
    	
    	//reseltSet 2: store the value from executed test query 
    	rs2=con.createStatement().executeQuery("SELECT customerName, CASE WHEN creditLimit > 50000 THEN 'PLATINUM' WHEN creditLimit >= 10000 AND creditLimit < 50000 THEN 'GOLD' WHEN creditLimit < 10000 THEN 'SILVER' END AS customerlevel FROM customers");
    	
    	//Compare both resultSets
    	Assert.assertEquals(compareResultSets(rs1,rs2), true);
    }
    
    //Test 
    @Test(priority=3)
    void test_CustomerLevel_with_StoredProcedure() throws SQLException
    {
    	//Get the first out put value by calling the stored procedure
    	cStmt=con.prepareCall("CALL GetCustomerLevel(?, ?)"); //Call the stored procedure
    	cStmt.setInt(1, 131);//Pass input parameter into the first "?"
    	cStmt.registerOutParameter(2, Types.VARCHAR); //Register output parameter for second "?"
    	cStmt.executeQuery();
    	String custlevel=cStmt.getString(2); //Get the output value and store it into 'custlevel'variable
    	
    	//Get the second output value by executing query
    	//Get the output value from the executed query and store it into rs
    	rs=con.createStatement().executeQuery("SELECT customerName, CASE WHEN creditLimit > 50000 THEN 'PLATINUM' WHEN creditLimit >= 10000 AND creditLimit < 50000 THEN 'GOLD' WHEN creditLimit < 10000 THEN 'SILVER' END as customerlevel FROM customers WHERE customerNumber=131");
    	rs.next();
    	String exp_custlevel=rs.getString("customerlevel"); //Get the value under 'customerlevel' and store it into 'exp_custlevel'
    	
    	
    }
    
    //Reusable boolean to compare resultSets
	public boolean compareResultSets(ResultSet resultSet1, ResultSet resultSet2) throws SQLException {
		while (resultSet1.next())
		{
			resultSet2.next();
			int count = resultSet1.getMetaData().getColumnCount();
			for (int i = 1; i <= count; i++)
			{
				if(!StringUtils.equals(resultSet1.getString(i),resultSet2.getString(i)))
				{
					return false;
				}
			}
		}
		return true;
	}
	
}
