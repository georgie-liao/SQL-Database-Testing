package storedproceduresTesting;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;

import org.apache.commons.lang3.StringUtils;
import org.testng.Assert;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

/* Syntax                                Stored Procedures 
 { call procedure_name()}        Accept no parameters and return no value
 { call procedure_name(?,?)}     Accept two parameters and return no value
 { ?=call procedure_name() }     Accept no parameters and return value
 { ?=call procedure_name(?)}     Accept one parameters and return value
*/



public class SPTesting {
	
	Connection con=null;
	Statement stmt=null;
	ResultSet rs;
	ResultSet rs1;
	ResultSet rs2;
	CallableStatement cStmt;
	
	@BeforeClass
	void setup() throws SQLException
	{
		con=DriverManager.getConnection("jdbc:mysql://localhost:3306/classicmodels", "root", "root");
	}
	
	@AfterClass
	void teardown() throws SQLException
	{
		con.close();
	}
	
	//@Test(priority=1)
	void test_storedProceduresExists() throws SQLException
	{
		stmt=con.createStatement();
		rs=stmt.executeQuery("SHOW PROCEDURE STATUS WHERE Name = 'SelectAllCustomer'");
		rs.next();
		Assert.assertEquals(rs.getString("Name"), "SelectAllCustomer");
	}
	
	//@Test(priority=2)
	void test_SelectAllCustomers() throws SQLException
	{
		cStmt=con.prepareCall("{CALL SelectAllCustomer()}");
		rs1=cStmt.executeQuery();  //result set 1
	
		Statement stmt=con.createStatement();
		rs2=stmt.executeQuery("SELECT * FROM customers;"); //result set 2
		
		Assert.assertEquals(compareResultSets(rs1, rs2), true); 
	}
	
	
	//@Test(priority=3)
	void test_SelectAllCustomersByCity() throws SQLException
	{
		cStmt=con.prepareCall("{CALL SelectAllCustomersByCity(?)}");
		cStmt.setString(1, "Singapore"); //set input parameter 
		rs1=cStmt.executeQuery();  //result set 1
	
		Statement stmt=con.createStatement();
		rs2=stmt.executeQuery("SELECT * FROM customers WHERE city = 'Singapore'"); //result set 2
		
		Assert.assertEquals(compareResultSets(rs1, rs2), true); 
	}
	
	//@Test(priority=4)
	void test_SelectAllCustomersByCityAndPin() throws SQLException
	{
		cStmt=con.prepareCall("{CALL SelectAllCustomersByCityAndPin(?,?)}");
		cStmt.setString(1, "Singapore"); //set input parameter 1
		cStmt.setString(2, "079903"); //set input parameter 2
		rs1=cStmt.executeQuery();  //result set 1
	
		Statement stmt=con.createStatement();
		rs2=stmt.executeQuery("SELECT * FROM customers WHERE city = 'Singapore' and postalCode = '079903'"); //result set 2
		
		Assert.assertEquals(compareResultSets(rs1, rs2), true); 
	}
	
	@Test(priority=5)
	void test_get_order_by_cust() throws SQLException
	{
		cStmt=con.prepareCall("{CALL get_order_by_cust(?,?,?,?,?)}");
		cStmt.setInt(1, 141);
		
		cStmt.registerOutParameter(2, Types.INTEGER);
		cStmt.registerOutParameter(2, Types.INTEGER);
		cStmt.registerOutParameter(4, Types.INTEGER);
		cStmt.registerOutParameter(5, Types.INTEGER);
		
		cStmt.executeQuery();
		
		int shipped=cStmt.getInt(2);
		int canceled=cStmt.getInt(3);
		int resolved=cStmt.getInt(4);
		int disputed=cStmt.getInt(5);
		
		System.out.println(shipped+" "+canceled+" "+resolved+" "+disputed);
	
	}

	public boolean compareResultSets(ResultSet resultSet1, ResultSet resultSet2) throws SQLException {
		while (resultSet1.next())
		{
			resultSet2.next();
			int count = resultSet1.getMetaData().getColumnCount();
			for (int i = 1; i <= count; i++)
			{
				if(!StringUtils.equals(resultSet1.getString(i),resultSet2.getString(i)))
				{
					return false;
				}
			}
		}
		return true;
	}
	
}
